{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RafdhiFatoni/ISE-Data-Science-Academy/blob/main/Tugas%202%20DS%20Academyipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### TUGAS - 2 (RRR TEAM)"
      ],
      "metadata": {
        "id": "oaqEhpqDeMwj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from scipy import stats\n",
        "\n",
        "lokasi_file = \"/content/dataset3.csv\"\n",
        "df = pd.read_csv(lokasi_file)\n",
        "df.head(5)"
      ],
      "metadata": {
        "id": "2uQQxlZNeeFw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "a6cd9031-975d-4816-e71d-be9a50ffd338"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Id  Age  Income      Home  Emp_length     Intent  Amount   Rate  Status  \\\n",
              "0   0   22   59000      RENT       123.0   PERSONAL   35000  16.02       1   \n",
              "1   1   21    9600       OWN         5.0  EDUCATION    1000  11.14       0   \n",
              "2   2   25    9600  MORTGAGE         1.0    MEDICAL    5500  12.87       1   \n",
              "3   3   23   65500      RENT         4.0    MEDICAL   35000  15.23       1   \n",
              "4   4   24   54400      RENT         8.0    MEDICAL   35000  14.27       1   \n",
              "\n",
              "   Percent_income Default  Cred_length  \n",
              "0            0.59       Y            3  \n",
              "1            0.10       N            2  \n",
              "2            0.57       N            3  \n",
              "3            0.53       N            2  \n",
              "4            0.55       Y            4  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-175f75f2-ddbd-4ae9-8a13-f89771e76915\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>Age</th>\n",
              "      <th>Income</th>\n",
              "      <th>Home</th>\n",
              "      <th>Emp_length</th>\n",
              "      <th>Intent</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Rate</th>\n",
              "      <th>Status</th>\n",
              "      <th>Percent_income</th>\n",
              "      <th>Default</th>\n",
              "      <th>Cred_length</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>22</td>\n",
              "      <td>59000</td>\n",
              "      <td>RENT</td>\n",
              "      <td>123.0</td>\n",
              "      <td>PERSONAL</td>\n",
              "      <td>35000</td>\n",
              "      <td>16.02</td>\n",
              "      <td>1</td>\n",
              "      <td>0.59</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>21</td>\n",
              "      <td>9600</td>\n",
              "      <td>OWN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>EDUCATION</td>\n",
              "      <td>1000</td>\n",
              "      <td>11.14</td>\n",
              "      <td>0</td>\n",
              "      <td>0.10</td>\n",
              "      <td>N</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>25</td>\n",
              "      <td>9600</td>\n",
              "      <td>MORTGAGE</td>\n",
              "      <td>1.0</td>\n",
              "      <td>MEDICAL</td>\n",
              "      <td>5500</td>\n",
              "      <td>12.87</td>\n",
              "      <td>1</td>\n",
              "      <td>0.57</td>\n",
              "      <td>N</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>23</td>\n",
              "      <td>65500</td>\n",
              "      <td>RENT</td>\n",
              "      <td>4.0</td>\n",
              "      <td>MEDICAL</td>\n",
              "      <td>35000</td>\n",
              "      <td>15.23</td>\n",
              "      <td>1</td>\n",
              "      <td>0.53</td>\n",
              "      <td>N</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>24</td>\n",
              "      <td>54400</td>\n",
              "      <td>RENT</td>\n",
              "      <td>8.0</td>\n",
              "      <td>MEDICAL</td>\n",
              "      <td>35000</td>\n",
              "      <td>14.27</td>\n",
              "      <td>1</td>\n",
              "      <td>0.55</td>\n",
              "      <td>Y</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-175f75f2-ddbd-4ae9-8a13-f89771e76915')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-175f75f2-ddbd-4ae9-8a13-f89771e76915 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-175f75f2-ddbd-4ae9-8a13-f89771e76915');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-527177fc-182e-4037-bd33-8c9a3e130510\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-527177fc-182e-4037-bd33-8c9a3e130510')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-527177fc-182e-4037-bd33-8c9a3e130510 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fr2QJViiz1ZH",
        "outputId": "4c2ff613-941a-4f29-bd93-a6d2cb48e44e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 28638 entries, 0 to 32580\n",
            "Data columns (total 12 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   Id              28638 non-null  int64  \n",
            " 1   Age             28638 non-null  int64  \n",
            " 2   Income          28638 non-null  int64  \n",
            " 3   Home            28638 non-null  object \n",
            " 4   Emp_length      28638 non-null  float64\n",
            " 5   Intent          28638 non-null  object \n",
            " 6   Amount          28638 non-null  int64  \n",
            " 7   Rate            28638 non-null  float64\n",
            " 8   Status          28638 non-null  int64  \n",
            " 9   Percent_income  28638 non-null  float64\n",
            " 10  Default         28638 non-null  object \n",
            " 11  Cred_length     28638 non-null  int64  \n",
            "dtypes: float64(3), int64(6), object(3)\n",
            "memory usage: 2.8+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.value_counts"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WJK2kI3o1dUK",
        "outputId": "6f689280-eff1-4086-d22f-b05f8a126865"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method DataFrame.value_counts of           Id  Age  Income      Home  Emp_length           Intent  Amount  \\\n",
              "0          0   22   59000      RENT       123.0         PERSONAL   35000   \n",
              "1          1   21    9600       OWN         5.0        EDUCATION    1000   \n",
              "2          2   25    9600  MORTGAGE         1.0          MEDICAL    5500   \n",
              "3          3   23   65500      RENT         4.0          MEDICAL   35000   \n",
              "4          4   24   54400      RENT         8.0          MEDICAL   35000   \n",
              "...      ...  ...     ...       ...         ...              ...     ...   \n",
              "32576  32576   57   53000  MORTGAGE         1.0         PERSONAL    5800   \n",
              "32577  32577   54  120000  MORTGAGE         4.0         PERSONAL   17625   \n",
              "32578  32578   65   76000      RENT         3.0  HOMEIMPROVEMENT   35000   \n",
              "32579  32579   56  150000  MORTGAGE         5.0         PERSONAL   15000   \n",
              "32580  32780   66   42000      RENT         2.0          MEDICAL    6475   \n",
              "\n",
              "        Rate  Status  Percent_income Default  Cred_length  \n",
              "0      16.02       1            0.59       Y            3  \n",
              "1      11.14       0            0.10       N            2  \n",
              "2      12.87       1            0.57       N            3  \n",
              "3      15.23       1            0.53       N            2  \n",
              "4      14.27       1            0.55       Y            4  \n",
              "...      ...     ...             ...     ...          ...  \n",
              "32576  13.16       0            0.11       N           30  \n",
              "32577   7.49       0            0.15       N           19  \n",
              "32578  10.99       1            0.46       N           28  \n",
              "32579  11.48       0            0.10       N           26  \n",
              "32580   9.99       0            0.15       N           30  \n",
              "\n",
              "[32581 rows x 12 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Menampilkan Grafik Outlier\n",
        "num_col = [\"Age\", \"Income\", \"Emp_length\", \"Amount\", \"Rate\",\"Percent_income\"]\n",
        "df[num_col].boxplot(grid=False, figsize=(10, 5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "ybc_A64m1gdU",
        "outputId": "2c647bcc-8486-4b19-8b94-3b90ed82eb19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Menampilkan jumlah missing value\n",
        "np.sum(df.isnull())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cz4JnDh62OfG",
        "outputId": "37808b39-1d18-4a99-f50f-313ac6594c93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Id                   0\n",
              "Age                  0\n",
              "Income               0\n",
              "Home                 0\n",
              "Emp_length         895\n",
              "Intent               0\n",
              "Amount               0\n",
              "Rate              3116\n",
              "Status               0\n",
              "Percent_income       0\n",
              "Default              0\n",
              "Cred_length          0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "missing_data = df[df.isnull().any(axis=1)]\n",
        "missing_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "2Qy_rqQo_jGO",
        "outputId": "3bcdb315-fc1e-49e4-950c-cb57d92ac96e"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Id  Age  Income      Home  Emp_length             Intent  Amount  \\\n",
              "39        39   23   71500      RENT         3.0  DEBTCONSOLIDATION   30000   \n",
              "50        50   24   78000      RENT         4.0  DEBTCONSOLIDATION   30000   \n",
              "57        57   23  277000       OWN         3.0           PERSONAL   35000   \n",
              "59        59   24   12000       OWN         2.0            VENTURE    1750   \n",
              "62        62   26  263000  MORTGAGE         0.0          EDUCATION   10000   \n",
              "...      ...  ...     ...       ...         ...                ...     ...   \n",
              "32547  32547   53    4888       OWN         0.0            VENTURE    1400   \n",
              "32552  32552   65   45900      RENT         2.0          EDUCATION   10000   \n",
              "32553  32553   54   20000      RENT         2.0            MEDICAL    5000   \n",
              "32569  32569   51   60000  MORTGAGE         1.0           PERSONAL    7500   \n",
              "32570  32570   58   72000      RENT         5.0    HOMEIMPROVEMENT    4500   \n",
              "\n",
              "       Rate  Status  Percent_income Default  Cred_length  \n",
              "39      NaN       1            0.42       N            4  \n",
              "50      NaN       1            0.38       Y            4  \n",
              "57      NaN       0            0.13       N            4  \n",
              "59      NaN       0            0.15       Y            3  \n",
              "62      NaN       1            0.04       N            4  \n",
              "...     ...     ...             ...     ...          ...  \n",
              "32547   NaN       1            0.29       Y           28  \n",
              "32552   NaN       0            0.22       Y           19  \n",
              "32553   NaN       0            0.25       N           28  \n",
              "32569   NaN       0            0.13       N           23  \n",
              "32570   NaN       0            0.06       N           23  \n",
              "\n",
              "[3943 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-efb2fc65-8d42-48a3-b7d6-54e5d7fcfd21\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>Age</th>\n",
              "      <th>Income</th>\n",
              "      <th>Home</th>\n",
              "      <th>Emp_length</th>\n",
              "      <th>Intent</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Rate</th>\n",
              "      <th>Status</th>\n",
              "      <th>Percent_income</th>\n",
              "      <th>Default</th>\n",
              "      <th>Cred_length</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>39</td>\n",
              "      <td>23</td>\n",
              "      <td>71500</td>\n",
              "      <td>RENT</td>\n",
              "      <td>3.0</td>\n",
              "      <td>DEBTCONSOLIDATION</td>\n",
              "      <td>30000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.42</td>\n",
              "      <td>N</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>50</td>\n",
              "      <td>24</td>\n",
              "      <td>78000</td>\n",
              "      <td>RENT</td>\n",
              "      <td>4.0</td>\n",
              "      <td>DEBTCONSOLIDATION</td>\n",
              "      <td>30000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.38</td>\n",
              "      <td>Y</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>57</td>\n",
              "      <td>23</td>\n",
              "      <td>277000</td>\n",
              "      <td>OWN</td>\n",
              "      <td>3.0</td>\n",
              "      <td>PERSONAL</td>\n",
              "      <td>35000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.13</td>\n",
              "      <td>N</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>59</td>\n",
              "      <td>24</td>\n",
              "      <td>12000</td>\n",
              "      <td>OWN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>VENTURE</td>\n",
              "      <td>1750</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.15</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>62</td>\n",
              "      <td>26</td>\n",
              "      <td>263000</td>\n",
              "      <td>MORTGAGE</td>\n",
              "      <td>0.0</td>\n",
              "      <td>EDUCATION</td>\n",
              "      <td>10000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.04</td>\n",
              "      <td>N</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32547</th>\n",
              "      <td>32547</td>\n",
              "      <td>53</td>\n",
              "      <td>4888</td>\n",
              "      <td>OWN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>VENTURE</td>\n",
              "      <td>1400</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.29</td>\n",
              "      <td>Y</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32552</th>\n",
              "      <td>32552</td>\n",
              "      <td>65</td>\n",
              "      <td>45900</td>\n",
              "      <td>RENT</td>\n",
              "      <td>2.0</td>\n",
              "      <td>EDUCATION</td>\n",
              "      <td>10000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.22</td>\n",
              "      <td>Y</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32553</th>\n",
              "      <td>32553</td>\n",
              "      <td>54</td>\n",
              "      <td>20000</td>\n",
              "      <td>RENT</td>\n",
              "      <td>2.0</td>\n",
              "      <td>MEDICAL</td>\n",
              "      <td>5000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.25</td>\n",
              "      <td>N</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32569</th>\n",
              "      <td>32569</td>\n",
              "      <td>51</td>\n",
              "      <td>60000</td>\n",
              "      <td>MORTGAGE</td>\n",
              "      <td>1.0</td>\n",
              "      <td>PERSONAL</td>\n",
              "      <td>7500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.13</td>\n",
              "      <td>N</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32570</th>\n",
              "      <td>32570</td>\n",
              "      <td>58</td>\n",
              "      <td>72000</td>\n",
              "      <td>RENT</td>\n",
              "      <td>5.0</td>\n",
              "      <td>HOMEIMPROVEMENT</td>\n",
              "      <td>4500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.06</td>\n",
              "      <td>N</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3943 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-efb2fc65-8d42-48a3-b7d6-54e5d7fcfd21')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-efb2fc65-8d42-48a3-b7d6-54e5d7fcfd21 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-efb2fc65-8d42-48a3-b7d6-54e5d7fcfd21');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-67a65c98-b7fb-44ac-901f-16253d8f0fb7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67a65c98-b7fb-44ac-901f-16253d8f0fb7')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-67a65c98-b7fb-44ac-901f-16253d8f0fb7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "missing_data = df.isnull()\n",
        "print(np.where(missing_data == True))"
      ],
      "metadata": {
        "id": "h3nH1Ust98DD",
        "outputId": "31142a4a-5ade-408e-d26f-5bb284d45f03",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(array([   39,    50,    57, ..., 32553, 32569, 32570]), array([7, 7, 7, ..., 7, 7, 7]))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menentukan outlier pada kolom Age menggunakan z-score dari library SciPy\n",
        "# NOTE: data dikatakan sebagai outlier apabila nilai z-score > 3\n",
        "z1 = np.abs(stats.zscore(df['Age']))\n",
        "print(z1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mIK6-JAH2xIo",
        "outputId": "4ac62e4e-1c87-4c64-c5ae-2d5a5aae45c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0        0.903374\n",
            "1        1.060904\n",
            "2        0.430783\n",
            "3        0.745843\n",
            "4        0.588313\n",
            "           ...   \n",
            "32576    4.610190\n",
            "32577    4.137599\n",
            "32578    5.870433\n",
            "32579    4.452660\n",
            "32580    6.027964\n",
            "Name: Age, Length: 32581, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menentukan outlier pada kolom Income menggunakan z-score dari library SciPy\n",
        "# NOTE: data dikatakan sebagai outlier apabila nilai z-score > 3\n",
        "z2 = np.abs(stats.zscore(df['Income']))\n",
        "print(z2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gwIhCbMf3CHY",
        "outputId": "81edc802-877e-4247-825c-485288c8546e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0        0.114143\n",
            "1        0.911147\n",
            "2        0.911147\n",
            "3        0.009274\n",
            "4        0.188358\n",
            "           ...   \n",
            "32576    0.210945\n",
            "32577    0.870011\n",
            "32578    0.160129\n",
            "32579    1.354021\n",
            "32580    0.388416\n",
            "Name: Income, Length: 32581, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menentukan outlier pada kolom Emp_length menggunakan z-score dari library SciPy\n",
        "# NOTE: data dikatakan sebagai outlier apabila nilai z-score > 3\n",
        "z3 = np.abs(stats.zscore(df['Emp_length']))\n",
        "print(z3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aEDDCHCd3KHx",
        "outputId": "36d1c96b-89b2-4c0d-9497-b0d7577a00dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       NaN\n",
            "1       NaN\n",
            "2       NaN\n",
            "3       NaN\n",
            "4       NaN\n",
            "         ..\n",
            "32576   NaN\n",
            "32577   NaN\n",
            "32578   NaN\n",
            "32579   NaN\n",
            "32580   NaN\n",
            "Name: Emp_length, Length: 32581, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menentukan outlier pada kolom Amount menggunakan z-score dari library SciPy\n",
        "# NOTE: data dikatakan sebagai outlier apabila nilai z-score > 3\n",
        "z4 = np.abs(stats.zscore(df['Amount']))\n",
        "print(z4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "shzFpJGI5R78",
        "outputId": "47b5c411-6cdb-4006-a6a7-488f2993af2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0        4.019404\n",
            "1        1.358650\n",
            "2        0.646849\n",
            "3        4.019404\n",
            "4        4.019404\n",
            "           ...   \n",
            "32576    0.599395\n",
            "32577    1.271060\n",
            "32578    4.019404\n",
            "32579    0.855843\n",
            "32580    0.492625\n",
            "Name: Amount, Length: 32581, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menentukan outlier pada kolom Rate menggunakan z-score dari library SciPy\n",
        "# NOTE: data dikatakan sebagai outlier apabila nilai z-score > 3\n",
        "z5 = np.abs(stats.zscore(df['Rate']))\n",
        "print(z5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nYQlavfY5eZt",
        "outputId": "cc831150-6a66-4778-967b-bde1937f44f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       NaN\n",
            "1       NaN\n",
            "2       NaN\n",
            "3       NaN\n",
            "4       NaN\n",
            "         ..\n",
            "32576   NaN\n",
            "32577   NaN\n",
            "32578   NaN\n",
            "32579   NaN\n",
            "32580   NaN\n",
            "Name: Rate, Length: 32581, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menentukan outlier pada kolom Percent_income menggunakan z-score dari library SciPy\n",
        "# NOTE: data dikatakan sebagai outlier apabila nilai z-score > 3\n",
        "z6 = np.abs(stats.zscore(df['Percent_income']))\n",
        "print(z6)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "59PWBwiM5oDs",
        "outputId": "5e696050-7760-43ef-ff00-739dbca2e4ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0        3.931411\n",
            "1        0.657458\n",
            "2        3.744110\n",
            "3        3.369508\n",
            "4        3.556809\n",
            "           ...   \n",
            "32576    0.563808\n",
            "32577    0.189207\n",
            "32578    2.713956\n",
            "32579    0.657458\n",
            "32580    0.189207\n",
            "Name: Percent_income, Length: 32581, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menampilkan data outlier\n",
        "print(np.where(z1 > 3))\n",
        "print(np.where(z2 > 3))\n",
        "print(np.where(z3 > 3))\n",
        "print(np.where(z4 > 3))\n",
        "print(np.where(z5 > 3))\n",
        "print(np.where(z6 > 3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O--ZxhM_52nx",
        "outputId": "f0c91b62-e2d8-4eb2-b6e9-999fb0bfb95c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(array([   81,   183,   575,   747, 29121, 29143, 29147, 29163, 29182,\n",
            "       29193, 29211, 29220, 29239, 29243, 29252, 29269, 29270, 29278,\n",
            "       29285, 29300, 29305, 29325, 29350, 29375, 29376, 29384, 29386,\n",
            "       29390, 29396, 29403, 29413, 29414, 29446, 29449, 29454, 29461,\n",
            "       29482, 29489, 29490, 29493, 29505, 29519, 29542, 29547, 29575,\n",
            "       29582, 29588, 29598, 29603, 29616, 29623, 29628, 29655, 29671,\n",
            "       29678, 29683, 29688, 29707, 29741, 29755, 29772, 29782, 29814,\n",
            "       29827, 29840, 29874, 29877, 29878, 29906, 29907, 29918, 29921,\n",
            "       29925, 29927, 29930, 29946, 29952, 29958, 29959, 29962, 29971,\n",
            "       29978, 29985, 30000, 30003, 30015, 30017, 30022, 30025, 30030,\n",
            "       30032, 30033, 30056, 30081, 30086, 30108, 30124, 30163, 30167,\n",
            "       30180, 30182, 30188, 30203, 30246, 30252, 30253, 30261, 30275,\n",
            "       30277, 30283, 30288, 30290, 30299, 30304, 30323, 30330, 30344,\n",
            "       30358, 30363, 30392, 30398, 30412, 30421, 30466, 30485, 30508,\n",
            "       30525, 30532, 30573, 30580, 30592, 30604, 30613, 30624, 30654,\n",
            "       30663, 30697, 30699, 30725, 30728, 30756, 30761, 30764, 30787,\n",
            "       30792, 30800, 30813, 30825, 30830, 30842, 30864, 30886, 30896,\n",
            "       30898, 30900, 30910, 30913, 30914, 30928, 30935, 30968, 30985,\n",
            "       30987, 30992, 30994, 31008, 31021, 31030, 31047, 31065, 31085,\n",
            "       31109, 31111, 31121, 31123, 31128, 31129, 31147, 31154, 31172,\n",
            "       31175, 31182, 31194, 31208, 31217, 31229, 31231, 31238, 31260,\n",
            "       31267, 31269, 31287, 31289, 31298, 31305, 31314, 31319, 31321,\n",
            "       31323, 31327, 31337, 31342, 31345, 31380, 31409, 31424, 31426,\n",
            "       31432, 31490, 31507, 31518, 31520, 31526, 31530, 31540, 31543,\n",
            "       31555, 31565, 31566, 31572, 31579, 31595, 31600, 31622, 31634,\n",
            "       31662, 31664, 31667, 31676, 31682, 31715, 31754, 31762, 31773,\n",
            "       31787, 31822, 31836, 31856, 31866, 31872, 31875, 31885, 31922,\n",
            "       31932, 31934, 31949, 31962, 31966, 31976, 31977, 31982, 31997,\n",
            "       32002, 32025, 32038, 32044, 32048, 32054, 32060, 32074, 32080,\n",
            "       32094, 32100, 32130, 32156, 32163, 32172, 32180, 32187, 32188,\n",
            "       32200, 32239, 32262, 32275, 32297, 32298, 32299, 32300, 32301,\n",
            "       32302, 32303, 32304, 32305, 32306, 32307, 32308, 32309, 32310,\n",
            "       32311, 32312, 32313, 32314, 32315, 32316, 32317, 32318, 32319,\n",
            "       32320, 32321, 32322, 32323, 32324, 32325, 32326, 32327, 32328,\n",
            "       32329, 32330, 32331, 32332, 32333, 32334, 32335, 32336, 32337,\n",
            "       32338, 32339, 32340, 32341, 32342, 32343, 32344, 32345, 32346,\n",
            "       32347, 32348, 32349, 32350, 32351, 32352, 32353, 32354, 32355,\n",
            "       32356, 32357, 32358, 32359, 32360, 32361, 32362, 32363, 32364,\n",
            "       32365, 32366, 32367, 32368, 32369, 32370, 32371, 32372, 32373,\n",
            "       32374, 32375, 32376, 32377, 32378, 32379, 32380, 32381, 32382,\n",
            "       32383, 32384, 32385, 32386, 32387, 32388, 32389, 32390, 32391,\n",
            "       32392, 32393, 32394, 32395, 32396, 32397, 32398, 32399, 32400,\n",
            "       32401, 32402, 32403, 32404, 32405, 32406, 32407, 32408, 32409,\n",
            "       32410, 32411, 32412, 32413, 32414, 32415, 32416, 32417, 32418,\n",
            "       32419, 32420, 32421, 32422, 32423, 32424, 32425, 32426, 32427,\n",
            "       32428, 32429, 32430, 32431, 32432, 32433, 32434, 32435, 32436,\n",
            "       32437, 32438, 32439, 32440, 32441, 32442, 32443, 32444, 32445,\n",
            "       32446, 32447, 32448, 32449, 32450, 32451, 32452, 32453, 32454,\n",
            "       32455, 32456, 32457, 32458, 32459, 32460, 32461, 32462, 32463,\n",
            "       32464, 32465, 32466, 32467, 32468, 32469, 32470, 32471, 32472,\n",
            "       32473, 32474, 32475, 32476, 32477, 32478, 32479, 32480, 32481,\n",
            "       32482, 32483, 32484, 32485, 32486, 32487, 32488, 32489, 32490,\n",
            "       32491, 32492, 32493, 32494, 32495, 32496, 32497, 32498, 32499,\n",
            "       32500, 32501, 32502, 32503, 32504, 32505, 32506, 32507, 32508,\n",
            "       32509, 32510, 32511, 32512, 32513, 32514, 32515, 32516, 32517,\n",
            "       32518, 32519, 32520, 32521, 32522, 32523, 32524, 32525, 32526,\n",
            "       32527, 32528, 32529, 32530, 32531, 32532, 32533, 32534, 32535,\n",
            "       32536, 32537, 32538, 32539, 32540, 32541, 32542, 32543, 32544,\n",
            "       32545, 32546, 32547, 32548, 32549, 32550, 32551, 32552, 32553,\n",
            "       32554, 32555, 32556, 32557, 32558, 32559, 32560, 32561, 32562,\n",
            "       32563, 32564, 32565, 32566, 32567, 32568, 32569, 32570, 32571,\n",
            "       32572, 32573, 32574, 32575, 32576, 32577, 32578, 32579, 32580]),)\n",
            "(array([   15,    33,    34,    42,    43,    44,    45,    46,    55,\n",
            "          56,    57,    61,    62,    66,    67,    68,   400, 15895,\n",
            "       15897, 15900, 15901, 15904, 15905, 15907, 15908, 15909, 15911,\n",
            "       15914, 15915, 16756, 17541, 17833, 17834, 17840, 17846, 17847,\n",
            "       17848, 17849, 17857, 17858, 17859, 17860, 17861, 17862, 17868,\n",
            "       17869, 17870, 17871, 17872, 17873, 17874, 17875, 17876, 17877,\n",
            "       17884, 17885, 17886, 17887, 17892, 17894, 17895, 17896, 17899,\n",
            "       17900, 17901, 17903, 17904, 17905, 17906, 17907, 17910, 17911,\n",
            "       17912, 17913, 17914, 17915, 17921, 17922, 17923, 17924, 18635,\n",
            "       18917, 19968, 20546, 20613, 21240, 21462, 21958, 23429, 23431,\n",
            "       25714, 27790, 27798, 27834, 27835, 27836, 27837, 27838, 27839,\n",
            "       27840, 27842, 27843, 27845, 27846, 27847, 27848, 27849, 27850,\n",
            "       27851, 27852, 27853, 27854, 27855, 27856, 27857, 27858, 27859,\n",
            "       27860, 27861, 27862, 27863, 27864, 27865, 27866, 27867, 27868,\n",
            "       27869, 27870, 27871, 27872, 27873, 27874, 27875, 27876, 27877,\n",
            "       27881, 27882, 27883, 27884, 27980, 27996, 28088, 28238, 28253,\n",
            "       28419, 28478, 28493, 28536, 28633, 28654, 28735, 28770, 28785,\n",
            "       28796, 29025, 29119, 29120, 29121, 29122, 29126, 29127, 29128,\n",
            "       29129, 29131, 29132, 29133, 29135, 29136, 29137, 29138, 29139,\n",
            "       29142, 29143, 29144, 29145, 29148, 29151, 29153, 29154, 29155,\n",
            "       29242, 29345, 29514, 29527, 29670, 30049, 30536, 31357, 31888,\n",
            "       31897, 31898, 31900, 31902, 31903, 31904, 31905, 31906, 31907,\n",
            "       31909, 31910, 31911, 31912, 31913, 31914, 31915, 31916, 31918,\n",
            "       31919, 31921, 31922, 31924, 31972, 32037, 32070, 32075, 32124,\n",
            "       32135, 32224, 32233, 32253, 32291, 32297, 32298, 32300, 32303,\n",
            "       32304, 32305, 32308, 32497, 32543, 32544, 32546, 32551]),)\n",
            "(array([], dtype=int64),)\n",
            "(array([    0,     3,     4,     6,     7,     8,    10,    12,    13,\n",
            "          14,    15,    16,    17,    18,    20,    21,    22,    24,\n",
            "          25,    28,    31,    32,    36,    37,    38,    39,    40,\n",
            "          47,    48,    49,    50,    51,    52,    53,    54,    57,\n",
            "          58,    60,    64,   103,   112,   113,   140,   222,   309,\n",
            "         336,   362,   363,   372,  7220,  8445,  8706,  9372,  9531,\n",
            "       10342, 10715, 11253, 11254, 11333, 11429, 11508, 11543, 11873,\n",
            "       11926, 12057, 12169, 12220, 12394, 12754, 13005, 13136, 13182,\n",
            "       13191, 13218, 13272, 13573, 13575, 13593, 13614, 13642, 13748,\n",
            "       13753, 13761, 13856, 13994, 14009, 14070, 14183, 14215, 14221,\n",
            "       14270, 14417, 14440, 14442, 14478, 14721, 14787, 14831, 14888,\n",
            "       14937, 15111, 15155, 15160, 15172, 15236, 15270, 15278, 15284,\n",
            "       15296, 15300, 15322, 15409, 15494, 15602, 15610, 15671, 15706,\n",
            "       15738, 15789, 15792, 15847, 15850, 15852, 15862, 15866, 15900,\n",
            "       15907, 15914, 16098, 16116, 16164, 16338, 16420, 16437, 16500,\n",
            "       16513, 16670, 16844, 16966, 17410, 17531, 17533, 17590, 17807,\n",
            "       17835, 17836, 17838, 17839, 17841, 17842, 17843, 17844, 17850,\n",
            "       17852, 17853, 17855, 17856, 17860, 17861, 17863, 17864, 17865,\n",
            "       17866, 17868, 17871, 17878, 17881, 17882, 17883, 17885, 17888,\n",
            "       17889, 17890, 17891, 17897, 17898, 17899, 17909, 17912, 17913,\n",
            "       17916, 17917, 17918, 17919, 17925, 17939, 17945, 17954, 17960,\n",
            "       18000, 18003, 18048, 18073, 18084, 18150, 18174, 22964, 22980,\n",
            "       23628, 23937, 23946, 24093, 24134, 24451, 24596, 24943, 24999,\n",
            "       25048, 25346, 25393, 25448, 25704, 25852, 25957, 25962, 25993,\n",
            "       26019, 26148, 26261, 26311, 26444, 26491, 26492, 26494, 26590,\n",
            "       26668, 26679, 26820, 26847, 26909, 26932, 26980, 27106, 27136,\n",
            "       27138, 27146, 27152, 27197, 27223, 27230, 27242, 27259, 27272,\n",
            "       27316, 27344, 27405, 27419, 27422, 27431, 27492, 27493, 27498,\n",
            "       27500, 27525, 27554, 27651, 27664, 27685, 27693, 27791, 27799,\n",
            "       27806, 27820, 27835, 27840, 27842, 27848, 27852, 27853, 27870,\n",
            "       27883, 27960, 28137, 28201, 28224, 28313, 28344, 28391, 28448,\n",
            "       28493, 28616, 28785, 28832, 29121, 29123, 29124, 29125, 29129,\n",
            "       29130, 29132, 29134, 29135, 29140, 29141, 29146, 29149, 29152,\n",
            "       29156, 29169, 29230, 30859, 30903, 31232, 31476, 31584, 31616,\n",
            "       31630, 31653, 31660, 31692, 31697, 31702, 31730, 31803, 31827,\n",
            "       31831, 31852, 31865, 31893, 31899, 31909, 31952, 31955, 31957,\n",
            "       32068, 32124, 32158, 32183, 32265, 32268, 32299, 32301, 32302,\n",
            "       32306, 32307, 32524, 32578]),)\n",
            "(array([], dtype=int64),)\n",
            "(array([    0,     2,     3,     4,    22,    28,    36,    75,   107,\n",
            "         108,   117,   118,   121,   122,   127,   128,   129,   130,\n",
            "         131,   132,   133,   143,   145,   146,   151,   160,   367,\n",
            "         402,   403,   404,   405,   406,   409,   460,   466,   469,\n",
            "         477,   493,   494,   535,   543,   546,   548,   571,   577,\n",
            "         578,   581,   582,   583,   584,   586,   587,   588,   589,\n",
            "         590,   596,   597,   603,   640,   894,   923,   926,   927,\n",
            "         943,   944,   945,   958,   959,   960,   962,   964,   965,\n",
            "         966,  1088,  1118,  1207,  1212,  1339,  1348,  1557,  1733,\n",
            "        1773,  1876,  1888,  1898,  2023,  2074,  2112,  2180,  2208,\n",
            "        2240,  2242,  2261,  2452,  2531,  2757,  2829,  3080,  3146,\n",
            "        3319,  3408,  3470,  3487,  3535,  4465,  4550,  4733,  4966,\n",
            "        5094,  5590,  5685,  5734,  6032,  6100,  6164,  6404,  6690,\n",
            "        6707,  6758,  7216,  7220,  7427,  7430,  7441,  7502,  7982,\n",
            "        8170,  8184,  8445,  8555,  8556,  8557,  8706,  9142, 10007,\n",
            "       10327, 10329, 10332, 10334, 10335, 10715, 11912, 12168, 12173,\n",
            "       12174, 12175, 13235, 13348, 13568, 14145, 14149, 14190, 14313,\n",
            "       14407, 14411, 14418, 14424, 14425, 14428, 14455, 14648, 14662,\n",
            "       14680, 15044, 15051, 15085, 15143, 15622, 15697, 15875, 15877,\n",
            "       15921, 15922, 15950, 15962, 15963, 16017, 16230, 16321, 16372,\n",
            "       16412, 16571, 16614, 16688, 16741, 16844, 16900, 16955, 16968,\n",
            "       17259, 17290, 17359, 17503, 17545, 17559, 17654, 17835, 17845,\n",
            "       17938, 17949, 17956, 17957, 17958, 17962, 17969, 17977, 17984,\n",
            "       17985, 18082, 18203, 18204, 18229, 18265, 18266, 18280, 18300,\n",
            "       18316, 18317, 18322, 18324, 18325, 18327, 18335, 18365, 18516,\n",
            "       18546, 18612, 18617, 18636, 18644, 18672, 18673, 18698, 18699,\n",
            "       18701, 18756, 18764, 18834, 18960, 19006, 19172, 19194, 19206,\n",
            "       19231, 19445, 19657, 19829, 19962, 19970, 20013, 20401, 20498,\n",
            "       20675, 20886, 21103, 21370, 21404, 21535, 21768, 21813, 21960,\n",
            "       21969, 22197, 22233, 22246, 22845, 22846, 22964, 22980, 23727,\n",
            "       24866, 24981, 25037, 25040, 25938, 26025, 26130, 26423, 26503,\n",
            "       26562, 26572, 26574, 26738, 26747, 26756, 27616, 27802, 27878,\n",
            "       27889, 27892, 27893, 27895, 28137, 28153, 28167, 28376, 28425,\n",
            "       28489, 28512, 28648, 28724, 28787, 28935, 28961, 28969, 29095,\n",
            "       29123, 29146, 29157, 29167, 29176, 29254, 29272, 29278, 29286,\n",
            "       29287, 29298, 29300, 29301, 29347, 29717, 29996, 30148, 30843,\n",
            "       31172, 31456, 31603, 31604, 31881, 31901, 31917, 31920, 31930,\n",
            "       32307, 32317, 32369]),)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghapus data outlier\n",
        "# Menghitung IQR (Interquartile Range) untuk kolom Income (kolom yang ingin dihapus outliernya)\n",
        "Q1 = df['Income'].quantile(0.25)\n",
        "Q3 = df['Income'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "# Menentukan batas bawah dan batas atas untuk outlier\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "# Membuat data frame tanpa outlier\n",
        "cleaned_df = df[(df['Income'] >= lower_bound) & (df['Income'] <= upper_bound)]\n",
        "\n",
        "# Menampilkan jumlah data (non-missing value) pada setiap kolom\n",
        "cleaned_df.count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K1D8k7yq5-T3",
        "outputId": "65e58290-cc45-4f35-8f71-c5f33256eb10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Id                31097\n",
              "Age               31097\n",
              "Income            31097\n",
              "Home              31097\n",
              "Emp_length        30216\n",
              "Intent            31097\n",
              "Amount            31097\n",
              "Rate              28119\n",
              "Status            31097\n",
              "Percent_income    31097\n",
              "Default           31097\n",
              "Cred_length       31097\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cleaned_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6r5qvWPz62Er",
        "outputId": "b1705718-a170-44d5-8371-e89790cd23d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 31097 entries, 0 to 32580\n",
            "Data columns (total 12 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   Id              31097 non-null  int64  \n",
            " 1   Age             31097 non-null  int64  \n",
            " 2   Income          31097 non-null  int64  \n",
            " 3   Home            31097 non-null  object \n",
            " 4   Emp_length      30216 non-null  float64\n",
            " 5   Intent          31097 non-null  object \n",
            " 6   Amount          31097 non-null  int64  \n",
            " 7   Rate            28119 non-null  float64\n",
            " 8   Status          31097 non-null  int64  \n",
            " 9   Percent_income  31097 non-null  float64\n",
            " 10  Default         31097 non-null  object \n",
            " 11  Cred_length     31097 non-null  int64  \n",
            "dtypes: float64(3), int64(6), object(3)\n",
            "memory usage: 3.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cleaned_df.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "pRFtcwdz7GlH",
        "outputId": "62c6fe0a-2404-47a2-cdcd-b71e8b9467aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Id  Age  Income      Home  Emp_length     Intent  Amount   Rate  Status  \\\n",
              "0   0   22   59000      RENT       123.0   PERSONAL   35000  16.02       1   \n",
              "1   1   21    9600       OWN         5.0  EDUCATION    1000  11.14       0   \n",
              "2   2   25    9600  MORTGAGE         1.0    MEDICAL    5500  12.87       1   \n",
              "3   3   23   65500      RENT         4.0    MEDICAL   35000  15.23       1   \n",
              "4   4   24   54400      RENT         8.0    MEDICAL   35000  14.27       1   \n",
              "\n",
              "   Percent_income Default  Cred_length  \n",
              "0            0.59       Y            3  \n",
              "1            0.10       N            2  \n",
              "2            0.57       N            3  \n",
              "3            0.53       N            2  \n",
              "4            0.55       Y            4  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7b5972ba-6fe0-4cf3-929f-f9acb4da1de0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>Age</th>\n",
              "      <th>Income</th>\n",
              "      <th>Home</th>\n",
              "      <th>Emp_length</th>\n",
              "      <th>Intent</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Rate</th>\n",
              "      <th>Status</th>\n",
              "      <th>Percent_income</th>\n",
              "      <th>Default</th>\n",
              "      <th>Cred_length</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>22</td>\n",
              "      <td>59000</td>\n",
              "      <td>RENT</td>\n",
              "      <td>123.0</td>\n",
              "      <td>PERSONAL</td>\n",
              "      <td>35000</td>\n",
              "      <td>16.02</td>\n",
              "      <td>1</td>\n",
              "      <td>0.59</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>21</td>\n",
              "      <td>9600</td>\n",
              "      <td>OWN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>EDUCATION</td>\n",
              "      <td>1000</td>\n",
              "      <td>11.14</td>\n",
              "      <td>0</td>\n",
              "      <td>0.10</td>\n",
              "      <td>N</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>25</td>\n",
              "      <td>9600</td>\n",
              "      <td>MORTGAGE</td>\n",
              "      <td>1.0</td>\n",
              "      <td>MEDICAL</td>\n",
              "      <td>5500</td>\n",
              "      <td>12.87</td>\n",
              "      <td>1</td>\n",
              "      <td>0.57</td>\n",
              "      <td>N</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>23</td>\n",
              "      <td>65500</td>\n",
              "      <td>RENT</td>\n",
              "      <td>4.0</td>\n",
              "      <td>MEDICAL</td>\n",
              "      <td>35000</td>\n",
              "      <td>15.23</td>\n",
              "      <td>1</td>\n",
              "      <td>0.53</td>\n",
              "      <td>N</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>24</td>\n",
              "      <td>54400</td>\n",
              "      <td>RENT</td>\n",
              "      <td>8.0</td>\n",
              "      <td>MEDICAL</td>\n",
              "      <td>35000</td>\n",
              "      <td>14.27</td>\n",
              "      <td>1</td>\n",
              "      <td>0.55</td>\n",
              "      <td>Y</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b5972ba-6fe0-4cf3-929f-f9acb4da1de0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7b5972ba-6fe0-4cf3-929f-f9acb4da1de0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7b5972ba-6fe0-4cf3-929f-f9acb4da1de0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-808651b1-798e-4770-add9-146cc7288b90\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-808651b1-798e-4770-add9-146cc7288b90')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-808651b1-798e-4770-add9-146cc7288b90 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cleaned_df.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mSO3Qs2d7blM",
        "outputId": "22d6fd67-2c98-442a-cddb-0099078b7df1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Id     Age  Income  Home      Emp_length  Intent             Amount  Rate   Status  Percent_income  Default  Cred_length\n",
              "0      22   59000   RENT      123.0       PERSONAL           35000   16.02  1       0.59            Y        3              1\n",
              "21511  32   27000   RENT      2.0         MEDICAL            6000    12.73  0       0.22            N        10             1\n",
              "21509  35   26400   RENT      2.0         DEBTCONSOLIDATION  6000    16.29  1       0.23            Y        8              1\n",
              "21508  27   26004   RENT      7.0         VENTURE            6000    7.14   0       0.23            N        5              1\n",
              "21507  27   26000   RENT      6.0         PERSONAL           6000    10.75  0       0.23            N        10             1\n",
              "                                                                                                                           ..\n",
              "10551  25   33500   RENT      2.0         VENTURE            10000   10.25  0       0.30            N        3              1\n",
              "10550  23   62500   MORTGAGE  3.0         DEBTCONSOLIDATION  10000   15.70  1       0.16            N        3              1\n",
              "10549  22   33280   RENT      2.0         VENTURE            10000   12.53  0       0.30            Y        4              1\n",
              "10548  26   68500   MORTGAGE  7.0         MEDICAL            9000    7.88   0       0.13            N        4              1\n",
              "32780  66   42000   RENT      2.0         MEDICAL            6475    9.99   0       0.15            N        30             1\n",
              "Length: 27305, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    }
  ]
}